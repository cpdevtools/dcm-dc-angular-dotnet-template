"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package = void 0;
const dependency_graph_1 = require("dependency-graph");
const fast_glob_1 = __importDefault(require("fast-glob"));
const fs_1 = __importDefault(require("fs"));
const linq_1 = __importDefault(require("linq"));
const posix_1 = __importDefault(require("path/posix"));
const index_js_1 = require("../../utils/index.js");
const PackageManager_1 = require("../PackageManager");
const WorkspaceCallError_1 = require("../WorkspaceCallError");
const WorkspaceCallSuccess_1 = require("../WorkspaceCallSuccess");
class Package {
    constructor(data, path, filename) {
        Object.defineProperty(this, "_path", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_workspaceQuery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._path = path;
        this._file = filename;
        this._data = data;
    }
    get path() {
        return this._path;
    }
    get fileName() {
        return this._file;
    }
    get fileType() {
        return posix_1.default.extname(this._file);
    }
    get data() {
        return this._data;
    }
    get name() {
        return this.data.name;
    }
    get version() {
        return this.data.version;
    }
    get dependencies() {
        var _a;
        (_a = this.data).dependencies ?? (_a.dependencies = {});
        return this.data.dependencies;
    }
    get devDependencies() {
        var _a;
        (_a = this.data).devDependencies ?? (_a.devDependencies = {});
        return this.data.devDependencies;
    }
    get peerDependencies() {
        var _a;
        (_a = this.data).peerDependencies ?? (_a.peerDependencies = {});
        return this.data.peerDependencies;
    }
    get optionalDependencies() {
        var _a;
        (_a = this.data).optionalDependencies ?? (_a.optionalDependencies = {});
        return this.data.optionalDependencies;
    }
    get dependencyNames() {
        return Object.keys(this.dependencies);
    }
    get devDependencyNames() {
        return Object.keys(this.devDependencies);
    }
    get peerDependencyNames() {
        return Object.keys(this.peerDependencies);
    }
    get optionalDependencyNames() {
        return Object.keys(this.optionalDependencies);
    }
    async execCmd(cmd) {
        const chalk = await (0, index_js_1.importChalk)();
        this.logInfo(chalk.blueBright(`Executing: ${chalk.gray(cmd)}`));
        return await (0, index_js_1.exec)(cmd, { cwd: this.path });
    }
    get scripts() {
        var _a;
        (_a = this.data).scripts ?? (_a.scripts = {});
        return this.data.scripts;
    }
    hasScript(scriptName) {
        return !!this.scripts[scriptName]?.trim();
    }
    async runScript(script, options) {
        const chalk = await (0, index_js_1.importChalk)();
        const opts = {
            ...options,
            throwOnError: options?.throwOnError ?? true,
            throwOnMissing: options?.throwOnMissing ?? true,
        };
        const scriptName = script.split(/\s/, 1)[0].trim();
        if (!this.hasScript(scriptName)) {
            if (opts?.throwOnMissing !== false) {
                this.logError(`Package does't have a script named '${chalk.cyanBright(scriptName)}'`);
                throw new Error(`Package does't have a script named '${scriptName}'`);
            }
            this.logInfo(`Package does't have a script named '${chalk.cyanBright(scriptName)}'. Skipping...`);
            return undefined;
        }
        this.logInfo(chalk.green(`Running ${chalk.cyanBright(scriptName)}`));
        let code = await this.execPackageScript(script);
        if (code !== 0) {
            if (opts?.throwOnError !== false) {
                this.logError(`Script '${chalk.cyanBright(scriptName)}' failed with exit code ${chalk.redBright(code)}`);
                throw new Error(`Script '${scriptName}' failed with exit code ${code}`);
            }
        }
        return code;
    }
    execPackageScript(script) {
        return this.execPackageManager(`run ${script}`);
    }
    get isWorkspace() {
        return !!this.data.workspaces;
    }
    get workspaces() {
        var _a;
        return ((_a = this.data).workspaces ?? (_a.workspaces = []));
    }
    async _workspaceQueryFactory() {
        const base = linq_1.default.from(Array.isArray(this.workspaces)
            ? this.data.workspaces
            : Array.isArray(this.workspaces.packages)
                ? this.workspaces.packages
                : []).select((p) => {
            const result = (0, fast_glob_1.default)(p, { cwd: this.path, onlyDirectories: true });
            return result;
        });
        const packages = linq_1.default.from(await Promise.all(linq_1.default.from(await Promise.all(base.toArray()))
            .selectMany((paths) => paths)
            .select((p) => (posix_1.default.isAbsolute(p) ? p : posix_1.default.join(this.path, p)))
            .where((p) => fs_1.default.existsSync(posix_1.default.join(p, "package.json")))
            .select((p) => PackageManager_1.PackageManager.loadPackage(p)))).orderBy((p) => p.name);
        return packages.asEnumerable();
    }
    get workspaceQuery() {
        return (this._workspaceQuery ?? (this._workspaceQuery = this._workspaceQueryFactory()));
    }
    async listWorkspacePackages() {
        return (await this.workspaceQuery).toArray();
    }
    async listWorkspaceNames() {
        return (await this.workspaceQuery).select((p) => p.name).toArray();
    }
    async workspaceExecute(cmd, options) {
        return this.workspaceCall(async (pkg) => {
            return await pkg.execCmd(cmd);
        }, options);
    }
    workspaceRunScript(cmd, options) {
        return this.workspaceCall(async (pkg) => {
            return await pkg.runScript(cmd, options);
        }, options);
    }
    async workspaceCall(fn, options) {
        const opt = this._applyWorkspaceSortingOptionDefaults(options);
        opt.throwOnError ?? (opt.throwOnError = false);
        const sequence = await this._buildWorkspaceWalkingOrder(opt);
        const results = [];
        for (const parallel of sequence) {
            const parallelPromises = [];
            for (const pkg of parallel) {
                const fnWrapper = async (pkg) => {
                    try {
                        const result = await fn(pkg);
                        return {
                            package: pkg,
                            result: result,
                            success: true,
                        };
                    }
                    catch (e) {
                        if (opt.throwOnError) {
                            throw e;
                        }
                        return {
                            package: pkg,
                            error: e,
                            success: false,
                        };
                    }
                };
                const promise = fnWrapper(pkg);
                parallelPromises.push(promise);
            }
            const result = await Promise.all(parallelPromises);
            results.push(...result);
        }
        const resultsQuery = linq_1.default.from(results);
        const rError = resultsQuery.where((r) => (0, WorkspaceCallError_1.isWorkspaceCallError)(r)).cast();
        const rSuccess = resultsQuery.where((r) => (0, WorkspaceCallSuccess_1.isWorkspaceCallSuccess)(r)).cast();
        return {
            hasErrors: rError.any(),
            errors: rError.toArray(),
            results: rSuccess.toArray(),
        };
    }
    _applyWorkspaceSortingOptionDefaults(options) {
        return {
            ...options,
            parallel: options.parallel ?? false,
            dependencies: options.dependencies ?? false,
            devDependencies: options.devDependencies ?? false,
            optionalDependencies: options.optionalDependencies ?? false,
            peerDependencies: options.peerDependencies ?? false,
        };
    }
    async _buildWorkspaceWalkingOrder(options) {
        let packages = [];
        if (options.dependencies || options.devDependencies || options.peerDependencies || options.optionalDependencies) {
            packages = await this._buildWorkspaceDependencyArray(options);
            if (!options.parallel) {
                packages = packages.flat().map((p) => [p]);
            }
        }
        else {
            const q = await this.workspaceQuery;
            if (options.parallel) {
                packages = [q.toArray()];
            }
            else {
                packages = q.select((p) => [p]).toArray();
            }
        }
        return packages;
    }
    async _buildWorkspaceDependencyArray(opts) {
        const runOrder = [];
        const depGraph = (await this._buildWorkspaceDependencyGraph(opts)).clone();
        let packages = depGraph.overallOrder(true).map((name) => depGraph.getNodeData(name));
        while (packages?.length) {
            runOrder.push(packages);
            packages.forEach((p) => depGraph.removeNode(p.name));
            packages = depGraph.overallOrder(true).map((name) => depGraph.getNodeData(name));
        }
        return runOrder;
    }
    async _buildWorkspaceDependencyGraph(opts) {
        const depGraph = new dependency_graph_1.DepGraph();
        const packagesQuery = await this.workspaceQuery;
        packagesQuery.forEach((pkg) => {
            depGraph.addNode(pkg.name, pkg);
        });
        const deps = packagesQuery.select((p) => ({
            name: p.name,
            deps: [
                ...(!opts.dependencies ? [] : p.dependencyNames),
                ...(!opts.devDependencies ? [] : p.devDependencyNames),
                ...(!opts.peerDependencies ? [] : p.peerDependencyNames),
                ...(!opts.optionalDependencies ? [] : p.optionalDependencyNames),
            ],
        }));
        deps.forEach((p) => {
            p.deps.forEach((d) => {
                depGraph.addDependency(p.name, d);
            });
        });
        return depGraph;
    }
    async printLog(msg) {
        const chalk = await (0, index_js_1.importChalk)();
        return chalk.white(chalk.blueBright(`[${chalk.yellow(this.name)}]`) + ` ${msg}`);
    }
    async logInfo(msg) {
        const chalk = await (0, index_js_1.importChalk)();
        console.info(`${chalk.bgGray.black.bold(" Info ")} ${this.printLog(msg)}`);
    }
    async logWarn(msg) {
        const chalk = await (0, index_js_1.importChalk)();
        console.warn(`${chalk.bgYellow.black.bold(" Warning ")} ${this.printLog(msg)}`);
    }
    async logError(msg) {
        const chalk = await (0, index_js_1.importChalk)();
        console.error(`${chalk.bgRed.white.bold(" ERROR ")} ${this.printLog(msg)}`);
    }
    async install() {
        return await this.execPackageManager("install");
    }
    async workspaceInstall(options) {
        return this.workspaceCall(async (pkg) => {
            return await pkg.install();
        }, options);
    }
}
exports.Package = Package;
//# sourceMappingURL=data:application/json;base64,